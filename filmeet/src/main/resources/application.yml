spring:
  profiles:
    active: dev  # 기본 활성화 프로파일 설정

  application:
    name: filmeet

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
    show-sql: true

  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      region:
        static: ap-northeast-2
      s3:
        bucket: ${SPRING_CLOUD_AWS_S3_BUCKET}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
            scope:
              - openid
              - profile
              - email
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            authorization-grant-type: authorization_code
            client-name: Google
            client-authentication-method: client_secret_post
          naver:
            provider: naver
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
              - profile_image
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            client-name: Naver
            client-authentication-method: client_secret_post
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

kobis:
  apikey: ${KOBIS_APIKEY}

kmdb:
  apikey: ${KMDB_APIKEY}

omdb:
  apikey: ${OMDB_APIKEY}

front:
  redirect-url: ${FRONT_REDIRECT_URL}

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type: trace
    org.springframework.security: debug
    org.springframework.web.client.RestTemplate: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health  # 헬스 체크를 위한 엔드포인트 활성화
  endpoint:
    health:
      show-details: always  # 헬스 체크 응답에 세부정보 표시

jwt:
  secret: ${JWT_SECRET}
  validity:
    access: ${JWT_VALIDITY_ACCESS}   # 분 단위
    refresh: ${JWT_VALIDITY_REFRESH} # 분 단위

server:
  port: 8080
  servlet:
    context-path: /api
  forward-headers-strategy: native
---

# Dev 환경 설정
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST}
      port: ${SPRING_DATA_REDIS_PORT}

firebase:
  config: ${FIREBASE_CONFIG}